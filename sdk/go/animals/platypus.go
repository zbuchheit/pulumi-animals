// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package animals

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type Platypus struct {
	pulumi.CustomResourceState

	Legs pulumi.IntOutput `pulumi:"legs"`
}

// NewPlatypus registers a new resource with the given unique name, arguments, and options.
func NewPlatypus(ctx *pulumi.Context,
	name string, args *PlatypusArgs, opts ...pulumi.ResourceOption) (*Platypus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Legs == nil {
		return nil, errors.New("invalid value for required argument 'Legs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Platypus
	err := ctx.RegisterResource("animals:index:Platypus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlatypus gets an existing Platypus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlatypus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlatypusState, opts ...pulumi.ResourceOption) (*Platypus, error) {
	var resource Platypus
	err := ctx.ReadResource("animals:index:Platypus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Platypus resources.
type platypusState struct {
}

type PlatypusState struct {
}

func (PlatypusState) ElementType() reflect.Type {
	return reflect.TypeOf((*platypusState)(nil)).Elem()
}

type platypusArgs struct {
	Legs int `pulumi:"legs"`
}

// The set of arguments for constructing a Platypus resource.
type PlatypusArgs struct {
	Legs pulumi.IntInput
}

func (PlatypusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*platypusArgs)(nil)).Elem()
}

type PlatypusInput interface {
	pulumi.Input

	ToPlatypusOutput() PlatypusOutput
	ToPlatypusOutputWithContext(ctx context.Context) PlatypusOutput
}

func (*Platypus) ElementType() reflect.Type {
	return reflect.TypeOf((**Platypus)(nil)).Elem()
}

func (i *Platypus) ToPlatypusOutput() PlatypusOutput {
	return i.ToPlatypusOutputWithContext(context.Background())
}

func (i *Platypus) ToPlatypusOutputWithContext(ctx context.Context) PlatypusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatypusOutput)
}

type PlatypusOutput struct{ *pulumi.OutputState }

func (PlatypusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Platypus)(nil)).Elem()
}

func (o PlatypusOutput) ToPlatypusOutput() PlatypusOutput {
	return o
}

func (o PlatypusOutput) ToPlatypusOutputWithContext(ctx context.Context) PlatypusOutput {
	return o
}

func (o PlatypusOutput) Legs() pulumi.IntOutput {
	return o.ApplyT(func(v *Platypus) pulumi.IntOutput { return v.Legs }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlatypusInput)(nil)).Elem(), &Platypus{})
	pulumi.RegisterOutputType(PlatypusOutput{})
}
